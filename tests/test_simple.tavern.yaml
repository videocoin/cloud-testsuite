---

test_name: Signing in with valid credentials produces valid jwt token

stages:
  - name: Sign in with valid credentials
    request:
      url: "{environment.host:s}{api_endpoints.auth:s}"
      method: POST
      json:
        email: "{environment.test_email:s}"
        password: "{environment.test_password:s}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_jwt
        extra_kwargs:
          jwt_key: "token"
          options:
            # Ignoring signature for now
            verify_signature: false
            verify_aud: false
      save:
        body:
          test_token: token

---

test_name: Signing in with invalid credentials produces error

stages:
  - name: Sign in with invalid credentials
    request:
      url: "{environment.host:s}{api_endpoints.auth:s}"
      method: POST
      json:
        email: "{environment.invalid_test_email:s}"
        password: "{environment.invalid_test_password:s}"
    response:
      status_code: 401
      body:
        fields: null
        message: "{error_messages.invalid_credentials:s}"
 
---

test_name: User information from token is accurate

stages:
  - name: Get user information of signed in user
    request:
      url: "{environment.host:s}{api_endpoints.user:s}"
      method: GET
      headers:
        Authorization: "Bearer {test_token:s}"
    response:
      status_code: 200
      body:
        id: "{expected_results.get_user_information.id}"
        email: "{expected_results.get_user_information.email}"
        name: "{expected_results.get_user_information.name}"
        # Difficulty with comparing boolean types between tavern and Python:
        # ERROR    tavern.response.base:base.py:53 Value mismatch in body: 
        # Type of returned data was different than expected (expected["is_active"] = 'True' (type = <class 'tavern.util.dict_util.format_keys.<locals>.InnerFormattedString'>), 
        # actual["is_active"] = 'True' (type = <class 'bool'>))

        # is_active: "{expected_results.get_user_information.is_active}"

        # Difficulty with comparing None types between tavern and Python:
        # ERROR    tavern.response.base:base.py:53 Value mismatch in body: 
        # Type of returned data was different than expected 
        # (expected["account"] = 'False' (type = <class 'bool'>), 
        # actual["account"] = 'None' (type = <class 'NoneType'>))

        # account: "{expected_results.get_user_information.account}"

        is_active: true
        account: null

---

test_name: Test password recovery

stages:
  - &start_password_recovery
    name: Send email to start password recovery
    request: 
      url: "{environment.host:s}{api_endpoints.recovery_start:s}"
      method: POST
      json:
        email: "{environment.test_email:s}"
    response:
      status_code: 200
    # Wait for server to send email
    delay_after: 5

  - name: Change password with token from recovery email
    request:
      url: "{environment.host:s}{api_endpoints.recover:s}"
      method: POST
      json:
       $ext:
          function: utils:get_password_reset_body
          extra_kwargs: 
            pop_server: "{environment.pop_server:s}"
            test_email: "{environment.test_email:s}"
            test_email_password: "{environment.test_email_password:s}"
            new_password: "{environment.test_password_2:s}"
    response:
      status_code: 200

  - name: Check that the new password works
    request:
      url: "{environment.host:s}{api_endpoints.auth:s}"
      method: POST
      json:
        email: "{environment.test_email:s}"
        password: "{environment.test_password_2:s}"
    response:
      status_code: 200 

  - *start_password_recovery

  - name: Change password back to old password for future tests
    request:
      url: "{environment.host:s}{api_endpoints.recover:s}"
      method: POST
      json:
        $ext:
          function: utils:get_password_reset_body
          extra_kwargs: 
            pop_server: "{environment.pop_server:s}"
            test_email: "{environment.test_email:s}"
            test_email_password: "{environment.test_email_password:s}"            
            new_password: "{environment.test_password:s}"
    response:
      status_code: 200

  - name: Check that changing back to old password works
    request:
      url: "{environment.host:s}{api_endpoints.auth:s}"
      method: POST
      json:
        email: "{environment.test_email:s}"
        password: "{environment.test_password:s}"
    response:
      status_code: 200
      